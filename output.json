{
  "compare" : null,
  "previous_successful_build" : {
    "build_num" : 57,
    "status" : "success",
    "build_time_millis" : 6156
  },
  "build_parameters" : {
    "CIRCLE_JOB" : "build"
  },
  "oss" : true,
  "all_commit_details_truncated" : false,
  "committer_date" : "2019-05-01T22:12:58+02:00",
  "steps" : [ {
    "name" : "Spin up Environment",
    "actions" : [ {
      "truncated" : false,
      "index" : 0,
      "parallel" : true,
      "failed" : null,
      "infrastructure_fail" : null,
      "name" : "Spin up Environment",
      "bash_command" : null,
      "status" : "success",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2019-05-01T20:14:46.624Z",
      "type" : "test",
      "allocation_id" : "5cc9fe280d5526000821d7cd-0-build/51CAEB30",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/27bfec10008e7904e2ef9cc5-5cc1a67bbdb235000178702b-0-0?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190501T202023Z&X-Amz-SignedHeaders=host&X-Amz-Expires=431999&X-Amz-Credential=AKIAIJNI6FA5RIAFFQ7Q%2F20190501%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=8494633ca3c2e880a00b4c0715b4cdb4e9ee411311b32dfccee0dd9843980c09",
      "start_time" : "2019-05-01T20:14:38.378Z",
      "background" : false,
      "exit_code" : null,
      "insignificant" : false,
      "canceled" : null,
      "step" : 0,
      "run_time_millis" : 8246,
      "has_output" : true
    } ]
  }, {
    "name" : "Checkout code",
    "actions" : [ {
      "truncated" : false,
      "index" : 0,
      "parallel" : true,
      "failed" : null,
      "infrastructure_fail" : null,
      "name" : "Checkout code",
      "bash_command" : "#!/bin/sh\nset -e\n\n# Workaround old docker images with incorrect $HOME\n# check https://github.com/docker/docker/issues/2968 for details\nif [ \"${HOME}\" = \"/\" ]\nthen\n  export HOME=$(getent passwd $(id -un) | cut -d: -f6)\nfi\n\nmkdir -p ~/.ssh\n\necho 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\nbitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\n' >> ~/.ssh/known_hosts\n\n(umask 077; touch ~/.ssh/id_rsa)\nchmod 0600 ~/.ssh/id_rsa\n(cat <<EOF > ~/.ssh/id_rsa\n$CHECKOUT_KEY\nEOF\n)\n\n# use git+ssh instead of https\ngit config --global url.\"ssh://git@github.com\".insteadOf \"https://github.com\" || true\ngit config --global gc.auto 0 || true\n\nif [ -e /home/circleci/project/.git ]\nthen\n  cd /home/circleci/project\n  git remote set-url origin \"$CIRCLE_REPOSITORY_URL\" || true\nelse\n  mkdir -p /home/circleci/project\n  cd /home/circleci/project\n  git clone \"$CIRCLE_REPOSITORY_URL\" .\nfi\n\nif [ -n \"$CIRCLE_TAG\" ]\nthen\n  git fetch --force origin \"refs/tags/${CIRCLE_TAG}\"\nelse\n  git fetch --force origin \"failure:remotes/origin/failure\"\nfi\n\n\nif [ -n \"$CIRCLE_TAG\" ]\nthen\n  git reset --hard \"$CIRCLE_SHA1\"\n  git checkout -q \"$CIRCLE_TAG\"\nelif [ -n \"$CIRCLE_BRANCH\" ]\nthen\n  git reset --hard \"$CIRCLE_SHA1\"\n  git checkout -q -B \"$CIRCLE_BRANCH\"\nfi\n\ngit reset --hard \"$CIRCLE_SHA1\"",
      "status" : "success",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2019-05-01T20:14:47.178Z",
      "type" : "test",
      "allocation_id" : "5cc9fe280d5526000821d7cd-0-build/51CAEB30",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/2bbfec10008e790463ef9cc5-5cc1a67bbdb235000178702b-101-0?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190501T202023Z&X-Amz-SignedHeaders=host&X-Amz-Expires=431999&X-Amz-Credential=AKIAIJNI6FA5RIAFFQ7Q%2F20190501%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=7ef583ab09cdae449f6ad0887114324e1cd30a50dfa29b5f88aef1833bd98da4",
      "start_time" : "2019-05-01T20:14:46.763Z",
      "background" : false,
      "exit_code" : 0,
      "insignificant" : false,
      "canceled" : null,
      "step" : 101,
      "run_time_millis" : 415,
      "has_output" : true
    } ]
  }, {
    "name" : "Reconstruct CIRCLE_COMPARE_URL",
    "actions" : [ {
      "truncated" : false,
      "index" : 0,
      "parallel" : true,
      "failed" : true,
      "infrastructure_fail" : null,
      "name" : "Reconstruct CIRCLE_COMPARE_URL",
      "bash_command" : "#!/bin/bash -eo pipefail\n## VARS\n\n# this starts as false, set to true to exit `until` loop\nFOUND_BASE_COMPARE_COMMIT=false\n\n# start iteration from the job before $CIRCLE_BUILD_NUM\nJOB_NUM=$(( $CIRCLE_BUILD_NUM - 1 ))\n\n## UTILS\n\nextract_commit_from_job () {\n  # abstract this logic out, it gets reused a few times\n  # takes $1 (VCS_TYPE) & $2 (a job number)\n\n  curl --user CIRCLE_TOKEN: \\\n    https://circleci.com/api/v1.1/project/$1/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$2 | \\\n    grep '\"vcs_revision\" : ' | sed -E 's/\"vcs_revision\" ://' | sed -E 's/[[:punct:]]//g' | sed -E 's/ //g'\n}\n\ncheck_if_branch_is_new () {\n  # takes a single argument for VCS_TYPE\n  # functionally, 'new' means: same commit for all jobs on the branch\n\n  # assume this is true, set to false if proven otherwise\n  local BRANCH_IS_NEW=true\n\n  # grab URL endpoints for jobs on this branch\n  # transform them into single-job API endpoints\n  # output them to a file for subsequent iteration\n  curl --user CIRCLE_TOKEN: \\\n    https://circleci.com/api/v1.1/project/$1/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH?limit=100 | \\\n    grep \"\\\"build_url\\\" : \\\"http\" | sed -E 's/\"build_url\" : //' | \\\n    sed -E 's|/bb/|/api/v1.1/project/bitbucket/|' | \\\n    sed -E 's|/gh/|/api/v1.1/project/github/|' | \\\n    sed -E 's/\"|,//g' | sed -E 's/ //g' \\\n    > API_ENDPOINTS_FOR_JOBS_ON_BRANCH\n\n  # loop through each job to compare commit hashes\n  while read line\n  do\n    if [[ $(curl --user CIRCLE_TOKEN: $line | grep \"\\\"vcs_revision\\\" : \\\"$CIRCLE_SHA1\\\"\") ]]; then\n      continue\n    else\n      BRANCH_IS_NEW=false\n      break\n    fi\n  done < API_ENDPOINTS_FOR_JOBS_ON_BRANCH\n\n  # clean up\n  if [[ false == false ]]; then\n    rm -f API_ENDPOINTS_FOR_JOBS_ON_BRANCH\n  fi\n\n  # true or false\n  echo $BRANCH_IS_NEW\n}\n\n## SETUP\n\n# determine VCS type, so we don't worry about it later\nif [[ $(echo $CIRCLE_REPOSITORY_URL | grep github.com:$CIRCLE_PROJECT_USERNAME) ]]; then\n  VCS_TYPE=github\nelse\n  VCS_TYPE=bitbucket\nfi\n\n# check if this is a new branch, as that informs later steps\necho \"checking if $CIRCLE_BRANCH is a new branch...\"\necho \"----------------------------------------------------------------------------------------------------\"\nif [[ $(check_if_branch_is_new $VCS_TYPE) == true ]]; then\n  echo \"----------------------------------------------------------------------------------------------------\"\n  echo \"yes, $CIRCLE_BRANCH is new and $CIRCLE_SHA1 is its only commit\"\n  echo \"finding most recent ancestor commit from any other branch...\"\n  echo \"----------------------------------------------------------------------------------------------------\"\n  BRANCH_IS_NEW=true\nelse\n  echo \"----------------------------------------------------------------------------------------------------\"\n  echo \"$CIRCLE_BRANCH is not a new branch, searching for its most recent previous commit...\"\n  echo \"----------------------------------------------------------------------------------------------------\"\n  BRANCH_IS_NEW=false\nfi\n\n## EXECUTION\n\n# manually iterate through previous jobs\nuntil [[ $FOUND_BASE_COMPARE_COMMIT == true ]]\ndo\n\n  # save circle api output to a temp file for reuse\n  curl --user CIRCLE_TOKEN: \\\n    https://circleci.com/api/v1.1/project/$VCS_TYPE/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUM \\\n    > JOB_OUTPUT\n\n  # general approach:\n  # there's a couple of skip conditions to observe here—\n  # roughly in order of precedence:\n\n  # 1. is JOB_NUM part of the current workflow?\n  # 2. is JOB_NUM a retry of a job from the same commit?\n    # 2.5 or part of a rerun workflow from the same commit?\n  # 3. is JOB_NUM from a different branch?\n    # 3.5 unless this is a new branch—see below\n\n  # edge cases:\n  # 1. if $CIRCLE_SHA1 is the first commit on a new branch\n    # then we need the most recent ancestor, branch-agnostic\n    # 1.5 a new branch doesn't always mean a new commit\n\n  # handling condition 3 & edge case 1:\n  # check if this is a brand-new branch\n  if [[ $BRANCH_IS_NEW == true ]]; then\n    COMMIT_FROM_JOB_NUM=$(extract_commit_from_job $VCS_TYPE $JOB_NUM)\n\n    # we do a similar check later on, but it needs to be here too\n    # for edge case 1.5: an existing commit pushed to a new branch\n    if [[ $COMMIT_FROM_JOB_NUM == $CIRCLE_SHA1 ]]; then\n      JOB_NUM=$(( $JOB_NUM - 1 ))\n      continue\n    fi\n\n    cd ~/project\n\n    # check if commit from JOB_NUM is an ancestor of $CIRCLE_SHA1\n    git merge-base --is-ancestor $COMMIT_FROM_JOB_NUM $CIRCLE_SHA1; RETURN_CODE=$?\n\n    if [[ $RETURN_CODE == 1 ]]; then\n      echo \"----------------------------------------------------------------------------------------------------\"\n      echo \"commit $COMMIT_FROM_JOB_NUM from job $JOB_NUM is not an ancestor of the current commit\"\n      echo \"----------------------------------------------------------------------------------------------------\"\n      JOB_NUM=$(( $JOB_NUM - 1 ))\n      continue\n    elif [[ $RETURN_CODE == 0 ]]; then\n      echo \"----------------------------------------------------------------------------------------------------\"\n      echo \"commit $COMMIT_FROM_JOB_NUM from job $JOB_NUM is an ancestor of the current commit\"\n      echo \"----------------------------------------------------------------------------------------------------\"\n      FOUND_BASE_COMPARE_COMMIT=true\n      break\n    else\n      echo \"unknown return code $RETURN_CODE from git merge-base with base commit $COMMIT_FROM_JOB_NUM, from job $JOB_NUM\"\n      exit 1\n    fi\n  else\n    # if not a new branch, find its most recent previous commit\n\n    # by now, if none of conditions 1, 2/2.5, or 3 apply, we're done:\n    # 1. make sure job isn't part of the same workflow\n    if [[ ! $(grep \"\\\"workflow_id\\\" : \\\"$CIRCLE_WORKFLOW_ID\\\"\" JOB_OUTPUT) && \\\n      # 2. make sure job is not a retry of a previous job\n      $(grep '\"retry_of\" : null' JOB_OUTPUT) && \\\n      # 2.5 make sure job is not from a rerun workflow (same commit)\n      ! $(grep \"\\\"vcs_revision\\\" : \\\"$CIRCLE_SHA1\\\"\" JOB_OUTPUT) && \\\n      # make sure we are on the same branch as $CIRCLE_BRANCH\n      # (we've already ruled out that this is a brand-new branch)\n      $(grep \"\\\"branch\\\" : \\\"$CIRCLE_BRANCH\\\"\" JOB_OUTPUT) ]]; then\n\n      echo \"----------------------------------------------------------------------------------------------------\"\n      echo \"success! job $JOB_NUM was neither part of the current workflow, part of a rerun workflow, a retry of a previous job, nor from a different branch\"\n      echo \"----------------------------------------------------------------------------------------------------\"\n\n      FOUND_BASE_COMPARE_COMMIT=true\n    else\n      echo \"----------------------------------------------------------------------------------------------------\"\n      echo \"job $JOB_NUM was part of the current workflow, part of a rerun workflow, a retry of a previous job, or from a different branch\"\n      echo \"----------------------------------------------------------------------------------------------------\"\n      JOB_NUM=$(( $JOB_NUM - 1 ))\n      continue\n    fi\n  fi\ndone\n\n## CONCLUSION\n\n# clean up\nrm -f JOB_OUTPUT\n\nBASE_COMPARE_COMMIT=$(extract_commit_from_job $VCS_TYPE $JOB_NUM)\n\n# construct our compare URL, based on VCS type\nif [[ $(echo $VCS_TYPE | grep github) ]]; then\n  CIRCLE_COMPARE_URL=\"https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/compare/${BASE_COMPARE_COMMIT:0:12}...${CIRCLE_SHA1:0:12}\"\nelse\n  CIRCLE_COMPARE_URL=\"https://bitbucket.org/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/branches/compare/${BASE_COMPARE_COMMIT:0:12}...${CIRCLE_SHA1:0:12}\"\nfi\n\necho \"----------------------------------------------------------------------------------------------------\"\necho \"base compare commit hash is:\" $BASE_COMPARE_COMMIT\necho \"\"\necho $BASE_COMPARE_COMMIT > BASE_COMPARE_COMMIT.txt\necho \"this job's commit hash is:\" $CIRCLE_SHA1\necho \"----------------------------------------------------------------------------------------------------\"\necho \"recreated CIRCLE_COMPARE_URL:\"\necho $CIRCLE_COMPARE_URL\necho \"----------------------------------------------------------------------------------------------------\"\necho \"outputting CIRCLE_COMPARE_URL to a file in your working directory, called CIRCLE_COMPARE_URL.txt\"\necho \"(BASE_COMPARE_COMMIT has also been stored in your working directory as BASE_COMPARE_COMMIT.txt)\"\necho $CIRCLE_COMPARE_URL > CIRCLE_COMPARE_URL.txt\necho \"----------------------------------------------------------------------------------------------------\"\necho \"next: both CIRCLE_COMPARE_URL.txt and BASE_COMPARE_COMMIT.txt will be persisted to a workspace, in case they are needed in later jobs\"\n",
      "status" : "failed",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2019-05-01T20:14:47.845Z",
      "type" : "test",
      "allocation_id" : "5cc9fe280d5526000821d7cd-0-build/51CAEB30",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/5bbfec10008e790473ef9cc5-5cc1a67bbdb235000178702b-102-0?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190501T202023Z&X-Amz-SignedHeaders=host&X-Amz-Expires=431999&X-Amz-Credential=AKIAIJNI6FA5RIAFFQ7Q%2F20190501%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=df204687a9835a622c5ff3fee75d6d8056f2cde15af4cdfdc0b5808d4becf5b1",
      "start_time" : "2019-05-01T20:14:47.184Z",
      "background" : false,
      "exit_code" : 1,
      "insignificant" : false,
      "canceled" : null,
      "step" : 102,
      "run_time_millis" : 661,
      "has_output" : true
    } ]
  } ],
  "body" : "",
  "usage_queued_at" : "2019-05-01T20:14:32.644Z",
  "context_ids" : [ ],
  "fail_reason" : null,
  "retry_of" : null,
  "reponame" : "learn-circle-ci",
  "ssh_users" : [ ],
  "build_url" : "https://circleci.com/gh/deanrobertcook/learn-circle-ci/59",
  "parallel" : 1,
  "failed" : true,
  "branch" : "failure",
  "username" : "deanrobertcook",
  "author_date" : "2019-05-01T22:12:58+02:00",
  "why" : "github",
  "user" : {
    "is_user" : true,
    "login" : "deanrobertcook",
    "avatar_url" : "https://avatars3.githubusercontent.com/u/5234193?v=4",
    "name" : "Dean Cook",
    "vcs_type" : "github",
    "id" : 5234193
  },
  "vcs_revision" : "f111a0ef157d7ae53fd2ed763a88aa88a62b1b3b",
  "workflows" : {
    "job_name" : "build",
    "job_id" : "59182805-b223-40ac-ba97-46ad1917e28a",
    "workflow_id" : "937b0a29-6c35-429c-8f84-570b3c8c6163",
    "workspace_id" : "4f82a503-67e2-4e4f-9221-d61e6f8539ea",
    "upstream_job_ids" : [ ],
    "upstream_concurrency_map" : { },
    "workflow_name" : "workflow"
  },
  "owners" : [ "deanrobertcook" ],
  "vcs_tag" : null,
  "pull_requests" : [ ],
  "build_num" : 59,
  "infrastructure_fail" : false,
  "committer_email" : "deanrobertcook@gmail.com",
  "has_artifacts" : true,
  "previous" : {
    "build_num" : 58,
    "status" : "failed",
    "build_time_millis" : 10348
  },
  "status" : "failed",
  "committer_name" : "dean",
  "retries" : null,
  "subject" : "Remove python change checker",
  "vcs_type" : "github",
  "timedout" : false,
  "dont_build" : null,
  "lifecycle" : "finished",
  "no_dependency_cache" : false,
  "stop_time" : "2019-05-01T20:14:47.883Z",
  "ssh_disabled" : true,
  "build_time_millis" : 9556,
  "picard" : {
    "build_agent" : {
      "image" : "circleci/picard:1.0.10778-32cf057b",
      "properties" : {
        "build_agent" : "1.0.10778-32cf057b",
        "executor" : "docker"
      }
    },
    "resource_class" : {
      "cpu" : 2.0,
      "ram" : 4096,
      "class" : "medium"
    },
    "executor" : "docker"
  },
  "circle_yml" : {
    "string" : "# Orb 'iynere/compare-url@0.2' resolved to 'iynere/compare-url@0.2.0'\nversion: 2\njobs:\n  build:\n    docker:\n    - image: circleci/python:3.7.2-stretch\n    steps:\n    - checkout\n    - run:\n        command: |\n          ## VARS\n\n          # this starts as false, set to true to exit `until` loop\n          FOUND_BASE_COMPARE_COMMIT=false\n\n          # start iteration from the job before $CIRCLE_BUILD_NUM\n          JOB_NUM=$(( $CIRCLE_BUILD_NUM - 1 ))\n\n          ## UTILS\n\n          extract_commit_from_job () {\n            # abstract this logic out, it gets reused a few times\n            # takes $1 (VCS_TYPE) & $2 (a job number)\n\n            curl --user CIRCLE_TOKEN: \\\n              https://circleci.com/api/v1.1/project/$1/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$2 | \\\n              grep '\"vcs_revision\" : ' | sed -E 's/\"vcs_revision\" ://' | sed -E 's/[[:punct:]]//g' | sed -E 's/ //g'\n          }\n\n          check_if_branch_is_new () {\n            # takes a single argument for VCS_TYPE\n            # functionally, 'new' means: same commit for all jobs on the branch\n\n            # assume this is true, set to false if proven otherwise\n            local BRANCH_IS_NEW=true\n\n            # grab URL endpoints for jobs on this branch\n            # transform them into single-job API endpoints\n            # output them to a file for subsequent iteration\n            curl --user CIRCLE_TOKEN: \\\n              https://circleci.com/api/v1.1/project/$1/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH?limit=100 | \\\n              grep \"\\\"build_url\\\" : \\\"http\" | sed -E 's/\"build_url\" : //' | \\\n              sed -E 's|/bb/|/api/v1.1/project/bitbucket/|' | \\\n              sed -E 's|/gh/|/api/v1.1/project/github/|' | \\\n              sed -E 's/\"|,//g' | sed -E 's/ //g' \\\n              > API_ENDPOINTS_FOR_JOBS_ON_BRANCH\n\n            # loop through each job to compare commit hashes\n            while read line\n            do\n              if [[ $(curl --user CIRCLE_TOKEN: $line | grep \"\\\"vcs_revision\\\" : \\\"$CIRCLE_SHA1\\\"\") ]]; then\n                continue\n              else\n                BRANCH_IS_NEW=false\n                break\n              fi\n            done < API_ENDPOINTS_FOR_JOBS_ON_BRANCH\n\n            # clean up\n            if [[ false == false ]]; then\n              rm -f API_ENDPOINTS_FOR_JOBS_ON_BRANCH\n            fi\n\n            # true or false\n            echo $BRANCH_IS_NEW\n          }\n\n          ## SETUP\n\n          # determine VCS type, so we don't worry about it later\n          if [[ $(echo $CIRCLE_REPOSITORY_URL | grep github.com:$CIRCLE_PROJECT_USERNAME) ]]; then\n            VCS_TYPE=github\n          else\n            VCS_TYPE=bitbucket\n          fi\n\n          # check if this is a new branch, as that informs later steps\n          echo \"checking if $CIRCLE_BRANCH is a new branch...\"\n          echo \"----------------------------------------------------------------------------------------------------\"\n          if [[ $(check_if_branch_is_new $VCS_TYPE) == true ]]; then\n            echo \"----------------------------------------------------------------------------------------------------\"\n            echo \"yes, $CIRCLE_BRANCH is new and $CIRCLE_SHA1 is its only commit\"\n            echo \"finding most recent ancestor commit from any other branch...\"\n            echo \"----------------------------------------------------------------------------------------------------\"\n            BRANCH_IS_NEW=true\n          else\n            echo \"----------------------------------------------------------------------------------------------------\"\n            echo \"$CIRCLE_BRANCH is not a new branch, searching for its most recent previous commit...\"\n            echo \"----------------------------------------------------------------------------------------------------\"\n            BRANCH_IS_NEW=false\n          fi\n\n          ## EXECUTION\n\n          # manually iterate through previous jobs\n          until [[ $FOUND_BASE_COMPARE_COMMIT == true ]]\n          do\n\n            # save circle api output to a temp file for reuse\n            curl --user CIRCLE_TOKEN: \\\n              https://circleci.com/api/v1.1/project/$VCS_TYPE/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUM \\\n              > JOB_OUTPUT\n\n            # general approach:\n            # there's a couple of skip conditions to observe here—\n            # roughly in order of precedence:\n\n            # 1. is JOB_NUM part of the current workflow?\n            # 2. is JOB_NUM a retry of a job from the same commit?\n              # 2.5 or part of a rerun workflow from the same commit?\n            # 3. is JOB_NUM from a different branch?\n              # 3.5 unless this is a new branch—see below\n\n            # edge cases:\n            # 1. if $CIRCLE_SHA1 is the first commit on a new branch\n              # then we need the most recent ancestor, branch-agnostic\n              # 1.5 a new branch doesn't always mean a new commit\n\n            # handling condition 3 & edge case 1:\n            # check if this is a brand-new branch\n            if [[ $BRANCH_IS_NEW == true ]]; then\n              COMMIT_FROM_JOB_NUM=$(extract_commit_from_job $VCS_TYPE $JOB_NUM)\n\n              # we do a similar check later on, but it needs to be here too\n              # for edge case 1.5: an existing commit pushed to a new branch\n              if [[ $COMMIT_FROM_JOB_NUM == $CIRCLE_SHA1 ]]; then\n                JOB_NUM=$(( $JOB_NUM - 1 ))\n                continue\n              fi\n\n              cd ~/project\n\n              # check if commit from JOB_NUM is an ancestor of $CIRCLE_SHA1\n              git merge-base --is-ancestor $COMMIT_FROM_JOB_NUM $CIRCLE_SHA1; RETURN_CODE=$?\n\n              if [[ $RETURN_CODE == 1 ]]; then\n                echo \"----------------------------------------------------------------------------------------------------\"\n                echo \"commit $COMMIT_FROM_JOB_NUM from job $JOB_NUM is not an ancestor of the current commit\"\n                echo \"----------------------------------------------------------------------------------------------------\"\n                JOB_NUM=$(( $JOB_NUM - 1 ))\n                continue\n              elif [[ $RETURN_CODE == 0 ]]; then\n                echo \"----------------------------------------------------------------------------------------------------\"\n                echo \"commit $COMMIT_FROM_JOB_NUM from job $JOB_NUM is an ancestor of the current commit\"\n                echo \"----------------------------------------------------------------------------------------------------\"\n                FOUND_BASE_COMPARE_COMMIT=true\n                break\n              else\n                echo \"unknown return code $RETURN_CODE from git merge-base with base commit $COMMIT_FROM_JOB_NUM, from job $JOB_NUM\"\n                exit 1\n              fi\n            else\n              # if not a new branch, find its most recent previous commit\n\n              # by now, if none of conditions 1, 2/2.5, or 3 apply, we're done:\n              # 1. make sure job isn't part of the same workflow\n              if [[ ! $(grep \"\\\"workflow_id\\\" : \\\"$CIRCLE_WORKFLOW_ID\\\"\" JOB_OUTPUT) && \\\n                # 2. make sure job is not a retry of a previous job\n                $(grep '\"retry_of\" : null' JOB_OUTPUT) && \\\n                # 2.5 make sure job is not from a rerun workflow (same commit)\n                ! $(grep \"\\\"vcs_revision\\\" : \\\"$CIRCLE_SHA1\\\"\" JOB_OUTPUT) && \\\n                # make sure we are on the same branch as $CIRCLE_BRANCH\n                # (we've already ruled out that this is a brand-new branch)\n                $(grep \"\\\"branch\\\" : \\\"$CIRCLE_BRANCH\\\"\" JOB_OUTPUT) ]]; then\n\n                echo \"----------------------------------------------------------------------------------------------------\"\n                echo \"success! job $JOB_NUM was neither part of the current workflow, part of a rerun workflow, a retry of a previous job, nor from a different branch\"\n                echo \"----------------------------------------------------------------------------------------------------\"\n\n                FOUND_BASE_COMPARE_COMMIT=true\n              else\n                echo \"----------------------------------------------------------------------------------------------------\"\n                echo \"job $JOB_NUM was part of the current workflow, part of a rerun workflow, a retry of a previous job, or from a different branch\"\n                echo \"----------------------------------------------------------------------------------------------------\"\n                JOB_NUM=$(( $JOB_NUM - 1 ))\n                continue\n              fi\n            fi\n          done\n\n          ## CONCLUSION\n\n          # clean up\n          rm -f JOB_OUTPUT\n\n          BASE_COMPARE_COMMIT=$(extract_commit_from_job $VCS_TYPE $JOB_NUM)\n\n          # construct our compare URL, based on VCS type\n          if [[ $(echo $VCS_TYPE | grep github) ]]; then\n            CIRCLE_COMPARE_URL=\"https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/compare/${BASE_COMPARE_COMMIT:0:12}...${CIRCLE_SHA1:0:12}\"\n          else\n            CIRCLE_COMPARE_URL=\"https://bitbucket.org/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/branches/compare/${BASE_COMPARE_COMMIT:0:12}...${CIRCLE_SHA1:0:12}\"\n          fi\n\n          echo \"----------------------------------------------------------------------------------------------------\"\n          echo \"base compare commit hash is:\" $BASE_COMPARE_COMMIT\n          echo \"\"\n          echo $BASE_COMPARE_COMMIT > BASE_COMPARE_COMMIT.txt\n          echo \"this job's commit hash is:\" $CIRCLE_SHA1\n          echo \"----------------------------------------------------------------------------------------------------\"\n          echo \"recreated CIRCLE_COMPARE_URL:\"\n          echo $CIRCLE_COMPARE_URL\n          echo \"----------------------------------------------------------------------------------------------------\"\n          echo \"outputting CIRCLE_COMPARE_URL to a file in your working directory, called CIRCLE_COMPARE_URL.txt\"\n          echo \"(BASE_COMPARE_COMMIT has also been stored in your working directory as BASE_COMPARE_COMMIT.txt)\"\n          echo $CIRCLE_COMPARE_URL > CIRCLE_COMPARE_URL.txt\n          echo \"----------------------------------------------------------------------------------------------------\"\n          echo \"next: both CIRCLE_COMPARE_URL.txt and BASE_COMPARE_COMMIT.txt will be persisted to a workspace, in case they are needed in later jobs\"\n        name: Reconstruct CIRCLE_COMPARE_URL\n    - persist_to_workspace:\n        paths:\n        - CIRCLE_COMPARE_URL.txt\n        - BASE_COMPARE_COMMIT.txt\n        root: .\n    - run:\n        name: Build incremental changes\n        command: |-\n          set -eo pipefail\n          CIRCLE_COMPARE_URL=$(cat CIRCLE_COMPARE_URL.txt)\n\n          COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')\n          echo \"Commit range: $COMMIT_RANGE\"\n\n          for PROJECT in src/*/; do\n            projectname=$(basename $PROJECT)\n            if [[ $(git diff $COMMIT_RANGE --name-status | grep \"$projectname\") ]]; then\n              (ls ${PROJECT}build.sh && echo \"build.sh found, attempting to build...\") || echo \"No build.sh file was found - the next line is expected to fail.\"\n              ${PROJECT}build.sh\n            else\n              echo \"${projectname} not modified; no need to promote\"\n            fi\n            echo \"------------------------------------------------------\"\n          done\nworkflows:\n  version: 2\n  workflow:\n    jobs:\n    - build\n\n# Original config.yml file:\n# #see https://gist.github.com/naesheim/18d0c0a58ee61f4674353a2f4cf71475\n# version: 2.1\n# orbs:\n#   compare-url: iynere/compare-url@0.2\n# jobs:\n#   build:\n#     docker:\n#       - image: circleci/python:3.7.2-stretch\n#     steps:\n#       - checkout\n#       - compare-url/reconstruct\n#       - run: \n#           name: Build incremental changes\n#           command: | \n#             set -eo pipefail\n#             CIRCLE_COMPARE_URL=$(cat CIRCLE_COMPARE_URL.txt)\n# \n#             COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')\n#             echo \\\"Commit range: $COMMIT_RANGE\\\"\n# \n#             for PROJECT in src/*/; do\n#               projectname=$(basename $PROJECT)\n#               if [[ $(git diff $COMMIT_RANGE --name-status | grep \\\"$projectname\\\") ]]; then\n#                 (ls ${PROJECT}build.sh && echo \\\"build.sh found, attempting to build...\\\") || echo \\\"No build.sh file was found - the next line is expected to fail.\\\"\n#                 ${PROJECT}build.sh\n#               else\n#                 echo \\\"${projectname} not modified; no need to promote\\\"\n#               fi\n#               echo \\\"------------------------------------------------------\\\"\n#             done"
  },
  "messages" : [ ],
  "is_first_green_build" : false,
  "job_name" : null,
  "start_time" : "2019-05-01T20:14:38.327Z",
  "canceler" : null,
  "all_commit_details" : [ {
    "committer_date" : "2019-05-01T22:12:58+02:00",
    "body" : "",
    "branch" : "failure",
    "author_date" : "2019-05-01T22:12:58+02:00",
    "committer_email" : "deanrobertcook@gmail.com",
    "commit" : "f111a0ef157d7ae53fd2ed763a88aa88a62b1b3b",
    "committer_login" : "deanrobertcook",
    "committer_name" : "dean",
    "subject" : "Remove python change checker",
    "commit_url" : "https://github.com/deanrobertcook/learn-circle-ci/commit/f111a0ef157d7ae53fd2ed763a88aa88a62b1b3b",
    "author_login" : "deanrobertcook",
    "author_name" : "dean",
    "author_email" : "deanrobertcook@gmail.com"
  } ],
  "platform" : "2.0",
  "outcome" : "failed",
  "vcs_url" : "https://github.com/deanrobertcook/learn-circle-ci",
  "author_name" : "dean",
  "node" : null,
  "queued_at" : "2019-05-01T20:14:32.681Z",
  "canceled" : false,
  "author_email" : "deanrobertcook@gmail.com"
}